|Stable| |Tag| |License| |Build| |Coverage| |Quality|

.. raw:: html

  <div align="center">
    <h1><code>kytos/of_lldp</code></h1>

    <strong>LLDP OpenFlow NApp</strong>

    <h3><a href="https://kytos-ng.github.io/api/of_lldp.html">OpenAPI Docs</a></h3>
  </div>

Overview
========

This NApp implements the Link Layer Discovery Protocol (LLDP). 

Features
========

This NApps is responsible for providing these major features:

- Link discovery
- Link liveness detection
- Interface loop detection

Link discovery
==============

In order to track connections between switches under the present SDN
controller, this NAPP uses the LLDP protocol with the following procedure:

1. Periodically this NApp builds and sends a PacketOut OpenFlow message
   containing an Ethernet Packet with LLDP data through all datapaths's interfaces.
   This LLDP packet is designed to the specific switch and port related to the
   PacketOut, by carrying the switch DPID and the Port that it will be forwarded
   through.

2. The switches forward the packet through the given Port and, if another
   switch is connected to that port, it will have a flow (pre-installed by the
   NApp) instructing it to send it back to the controller. So, it will generate
   a ``PacketIn`` with that Ethernet packet to the controller.

3. This NApp will get all ``PacketIn`` messages and look for Ethernet packets
   with LLDP content. If it is one of the LLDP packets generated by the NApp
   itself, then it will get the information from the ``PacketIn`` (switch/dpid
   and in_port).

4. At last but not least, the NApp will generate a KytosEvent with the
   'source-destination' information, denoting those interfaces are NNIs.

This protocol is vendor free and used to discover network devices and all links
between them. This protocol is implemented at layer 2 (L2) and defined in the
IEEE 802.1ab. A network management system (NMS) can rapidly obtain the L2
network topology and topology changes over time using LLDP.

Link liveness detection
=======================

Link liveness detection via LLDP leverages the existing link discovery messages to provide 
this functionality. Link liveness detection is enabled per interface and it needs to be
enabled on each pair to work. This implementation is meant to be a generic alternative
to BFD (Bidirectional Forwarding Detection - RFC 5880) where the protocol states is 
being tracked by the control plane. For more information, check out `EP030 <https://github.com/kytos-ng/kytos/blob/master/docs/blueprints/EP030.rst>`_.

Interface loop detection
========================

Interface loop detection is a mechanism to detect if an interface of a switch is looped, this feature uses the existing LLDP messages. This feature is enabled by default once LLDP is enabled, but interfaces that have intentional loops can be configured to be ignored. By default, once a loop is detected, it'll generate a log warning message, additional actions such as disable can also be configured. For more information, check out `EP025 <https://github.com/kytos-ng/kytos/blob/master/docs/blueprints/EP025.rst>`_.


Installing
==========

To install this NApp, first, make sure to have the same venv activated as you have ``kytos`` installed on:

.. code:: shell

   $ git clone https://github.com/kytos-ng/of_lldp.git
   $ cd of_lldp
   $ python3 -m pip install --editable .

To install the kytos environment, please follow our
`development environment setup <https://github.com/kytos-ng/documentation/blob/master/tutorials/napps/development_environment_setup.rst>`_.

Requirements
============

- `kytos/of_core <https://github.com/kytos-ng/of_core>`_
- `kytos/flow_manager <https://github.com/kytos-ng/flow_manager>`_
- `kytos/topology <https://github.com/kytos-ng/topology>`_
- `MongoDB <https://github.com/kytos-ng/kytos#how-to-use-with-mongodb>`_

Events
======

Subscribed
----------

- ``kytos/of_core.v0x04.messages.in.ofpt_packet_in``
- ``kytos/topology.switch.enabled``
- ``kytos/topology.switch.disabled``
- ``kytos/topology.topology_loaded``
- ``kytos/topology.switches.metadata.(added|removed)``
- ``kytos/of_multi_table.enable_table``
- ``kytos/topology.switch.deleted``
- ``kytos/topology.interface.deleted``

Published
---------

kytos/of_lldp.messages.out.ofpt_packet_out
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``message_out``

Standard "message out" event with a PacketOut message to the switch containing
a LLDP packet inside it.

Content:

.. code-block:: python3

    { 'message': <object>, # instance of a python-openflow PacketOut message
      'destination': <object> # instance of kytos.core.switch.Connection class
    }

kytos/of_lldp.interface.is.nni
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

An evento to notify that a link between two network-to-network interfaces
(NNIs) was identified. This identification is possible due to the fact that a
connection between two switches was identified. This does not mean that it is a
new connection, it may be an already known connection between two switches.
This event contains two attributes, `interface_a` and `interface_b`, and each
one of them contains an attribute `switch` and another `port`, the first one
contains the switch id and the second one the port number.

Content:

.. code-block:: python3

    {
      'interface_a': <interface_a>, # Object instance of Interface
      'interface_b': <interface_b>
    }


kytos/of_lldp.loop.detected
~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that a loop has been detected.

Content:

.. code-block:: python3

   {
     'dpid': <str>,
     'interface_id': <str>,
     'port_numbers': [<int>, <int>],
   }


kytos.of_lldp/loop.stopped
~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that a loop has stopped.

Content:

.. code-block:: python3

   {
     'dpid': <str>,
     'interface_id': <str>,
     'port_numbers': [<int>, <int>],
   }


kytos/of_lldp.liveness.up
~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that link liveness is up

Content:

.. code-block:: python3

   {
     "interface_a": <Interface obj>
     "interface_b": <Interface obj>
   }

kytos/of_lldp.liveness.down
~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that link liveness is down

Content:

.. code-block:: python3

   {
     "interface_a": <Interface obj>
     "interface_b": <Interface obj>
   }


kytos/of_lldp.liveness.enabled
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that liveness has been enabled on interfaces

Content:

.. code-block:: python3

   {
     "interfaces": [<Interface obj>]
   }

kytos/of_lldp.liveness.disabled
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*buffer*: ``app``

Event reporting that liveness has been disabled on interfaces

Content:

.. code-block:: python3

   {
     "interfaces": [<Interface obj>]
   }

kytos/of_lldp.enable_table
~~~~~~~~~~~~~~~~~~~~~~~~~~~

A response from the ``kytos/of_multi_table.enable_table`` event to confirm table settings.

.. code-block:: python3

  {
    'table_group': <object>
  }

.. |License| image:: https://img.shields.io/github/license/kytos-ng/kytos.svg
   :target: https://github.com/kytos-ng/of_lldp/blob/master/LICENSE
.. |Build| image:: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/badges/build.png?b=master
  :alt: Build status
  :target: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/?branch=master
.. |Coverage| image:: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/badges/coverage.png?b=master
  :alt: Code coverage
  :target: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/?branch=master
.. |Quality| image:: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/badges/quality-score.png?b=master
  :alt: Code-quality score
  :target: https://scrutinizer-ci.com/g/kytos-ng/of_lldp/?branch=master
.. |Stable| image:: https://img.shields.io/badge/stability-stable-green.svg
   :target: https://github.com/kytos-ng/of_lldp
.. |Tag| image:: https://img.shields.io/github/tag/kytos-ng/pathfinder.svg
   :target: https://github.com/kytos-ng/of_lldp/tags
